#!/bin/bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e            # fail fast
set -o pipefail   # do not ignore exit codes when piping output

# Heroku-provided params
BUILD_DIR="$1"
CACHE_DIR="$2"
ENV_DIR="$3"
BP_DIR=`cd $(dirname $0); cd ..; pwd`

POSTGREST_VER=${POSTGREST_VER:-7.0.1}
RELEASE_VER="v${POSTGREST_VER}"

CLEAR_CACHE=${CLEAR_CACHE:-0}

export_env_dir() {
  local env_dir=${1:-$ENV_DIR}
  local whitelist_regex=${2:-''}
  local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|BUILDPACK_URL)$'}

  if [ -d "$env_dir" ]; then
    echo "-----> Exporting config vars"
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
        echo "       $e" &&
        export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir

if [[ $CLEAR_CACHE -eq 1 ]] ; then
  echo "-----> Clearing the buildpack cache"
  rm -fr $CACHE_DIR/
fi

############# PostgREST binary ################################

BIN="postgrest-${POSTGREST_VER}"

if [ ! -e $CACHE_DIR/$BIN ]; then
  BIN_URL="https://github.com/PostgREST/postgrest/releases/download/v${POSTGREST_VER}/postgrest-${RELEASE_VER}-linux-x64-static.tar.xz"
  if curl --output /dev/null --silent --head --fail $BIN_URL; then
    echo "-----> Downloading and caching PostgREST $POSTGREST_VER binary"
    mkdir -p $CACHE_DIR
    curl -# -L $BIN_URL | tar xJ -C $CACHE_DIR
    if ! ver20; then
      mv $CACHE_DIR/postgrest $CACHE_DIR/$BIN
    fi
  else
    echo "-----> Could not find prebuilt $BIN"
    exit 1
  fi
fi

echo "-----> Restoring cached $BIN"
cp -R $CACHE_DIR/$BIN $BUILD_DIR

echo "-----> Copying the config file builder"
cp $BP_DIR/env-to-config $BUILD_DIR
chmod +x $BUILD_DIR/env-to-config

echo "-----> Creating Procfile"
if ver20; then
  cat <<EOF > $BUILD_DIR/Procfile
web: ./${BIN} -p \$PORT -s -d \$DB_NAME -U \$AUTH_ROLE --db-pass "\$AUTH_PASS" -a \$ANONYMOUS_ROLE --db-host \$DB_HOST -P \$DB_PORT --db-pool \$DB_POOL --jwt-secret \$JWT_SECRET --v1schema \$SCHEMA
EOF
elif ver30; then
  cat <<EOF > $BUILD_DIR/Procfile
web: ./${BIN} "postgres://$AUTH_ROLE:$AUTH_PASS@$DB_HOST:$DB_PORT/$DB_NAME" -p \$PORT -a \$ANONYMOUS_ROLE --pool \$DB_POOL --jwt-secret \$JWT_SECRET --schema \$SCHEMA
EOF
else
  cat <<EOF > $BUILD_DIR/Procfile
web: ./env-to-config ./${BIN} postgrest.conf
EOF
fi

echo "-----> Persisting settings"
PROFILE_PATH="$BUILD_DIR/.profile.d/postgrest.sh"
mkdir -p $(dirname $PROFILE_PATH)
# Usage: $ set-default-env key value
function set-default-env (){
  echo "export $1=\${$1:-$2}" >> $PROFILE_PATH
}

set-default-env LD_LIBRARY_PATH /app/ghc-libs:/usr/lib

echo "-----> ❤ stay declarative ❤"
